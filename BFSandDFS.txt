public void DFS() {
          
            Stack s = new Stack();
            s.push(this.rootNode);
            rootNode.visited = true;
            printNode(rootNode);
            while(!s.isEmpty()) {
                Node n = (Node)s.peek();
                Node child = getUnvisitedChildNode(n); 
                if(child != null) {
                    child.visited = true;
                    printNode(child); 
                    s.push(child);
                }
                else {
                    s.pop();
                }
            }
           
            clearNodes(); //ziyaret edilenleri sil
        }



/////////////////////////////////////////////////////////////////////////////////////////////////////



 public void BFS() {
            
            Queue q = new LinkedList();
            q.add(this.rootNode);
            printNode(this.rootNode);
            rootNode.visited = true;
            while(!q.isEmpty()) {
                Node n = (Node)q.remove();
                Node child = null;
                while((child = getUnvisitedChildNode(n)) != null) {
                    child.visited = true;
                    printNode(child);
                    q.add(child);
                }
            }
            
            clearNodes();
        }